#usda 1.0
(
    defaultPrim = "World"
    upAxis = "Y"
    metersPerUnit = 0.01
)

def Scope "World"
{
    def Mesh "constant"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(1, 0.3, 0.3)] (
            interpolation = "constant"
        )
        
        double3 xformOp:translate = (0, 0, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]  
    }
    
    def Mesh "uniform"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(1, 0.3, 0.3), (0.3, 0.3, 1)] (
            interpolation = "uniform"
        )
        
        double3 xformOp:translate = (0, -1.1, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]        
    }
    
    def Mesh "varying"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(1, 0, 0), (1, 1, 0), (1, 1, 1), (0, 1, 0), (1, 0, 1), (0, 0, 1)]  (
            interpolation = "varying"
        )
        
        double3 xformOp:translate = (0, -2.2, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]        
    }
    
    def Mesh "varying_edgeOnly"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(1, 0, 0), (1, 1, 0), (1, 1, 1), (0, 1, 0), (1, 0, 1), (0, 0, 1)]  (
            interpolation = "varying"
        )
        
        token interpolateBoundary = "edgeOnly"
        
        double3 xformOp:translate = (2, -2.2, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]        
    }
    
    def Mesh "vertex"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(1, 0, 0), (1, 1, 0), (1, 1, 1), (0, 1, 0), (1, 0, 1), (0, 0, 1)] (
            interpolation = "vertex"
        )
        
        double3 xformOp:translate = (0, -3.3, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]        
    }
    
    def Mesh "vertex_edgeOnly"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(1, 0, 0), (1, 1, 0), (1, 1, 1), (0, 1, 0), (1, 0, 1), (0, 0, 1)] (
            interpolation = "vertex"
        )
        
        token interpolateBoundary = "edgeOnly"
        
        double3 xformOp:translate = (2, -3.3, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]        
    }
    
    def Mesh "faceVarying"
    {
        float3[] extent = [(-1, 0, 0), (1, 1, 0)]
        point3f[] points = [(-1, 0, 0), (-1, 1, 0), (0, 1, 0), (0, 0, 0), (1, 1, 0), (1, 0, 0)]
        int[] faceVertexCounts = [4, 4]
        int[] faceVertexIndices = [3, 2, 1, 0, 5, 4, 2, 3]
        
        color3f[] primvars:displayColor = [(0, 1, 0), (0, 0, 1), (1, 1, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (1, 1, 0), (1, 1, 0)] (
            interpolation = "faceVarying"
        )
        
        double3 xformOp:translate = (0, -4.4, -10)
        uniform token[] xformOpOrder = ["xformOp:translate"]        
    }
}